// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eHousing.Database;

namespace eHousing.Migrations
{
    [DbContext(typeof(eHousingContext))]
    [Migration("20210613115958_V4")]
    partial class V4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eHousing.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Sarajevo"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Konjic"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Mostar"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Tuzla"
                        });
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FloorSpace")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EstateId");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("StreetId");

                    b.HasIndex("UserId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("eHousing.Database.EstateType", b =>
                {
                    b.Property<int>("EstateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstateTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EstateTypeId");

                    b.ToTable("EstateTypes");
                });

            modelBuilder.Entity("eHousing.Database.FavoriteEstate", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EstateId");

                    b.HasIndex("EstateId");

                    b.ToTable("FavoriteEstates");
                });

            modelBuilder.Entity("eHousing.Database.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("EstateId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("eHousing.Database.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupiedSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccupiedTill")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RentId");

                    b.HasIndex("EstateId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("eHousing.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("eHousing.Database.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreetId");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");

                    b.HasData(
                        new
                        {
                            StreetId = 1,
                            CityId = 1,
                            StreetName = "Džemala Bijedića"
                        },
                        new
                        {
                            StreetId = 2,
                            CityId = 1,
                            StreetName = "Baščaršijski trg"
                        },
                        new
                        {
                            StreetId = 3,
                            CityId = 1,
                            StreetName = "Alipašina"
                        },
                        new
                        {
                            StreetId = 4,
                            CityId = 1,
                            StreetName = "Aščiluk"
                        },
                        new
                        {
                            StreetId = 5,
                            CityId = 2,
                            StreetName = "Maršala Tita"
                        },
                        new
                        {
                            StreetId = 6,
                            CityId = 2,
                            StreetName = "Trešanica"
                        },
                        new
                        {
                            StreetId = 7,
                            CityId = 2,
                            StreetName = "Luka"
                        },
                        new
                        {
                            StreetId = 8,
                            CityId = 2,
                            StreetName = " Varda"
                        },
                        new
                        {
                            StreetId = 9,
                            CityId = 3,
                            StreetName = "Zalik"
                        },
                        new
                        {
                            StreetId = 10,
                            CityId = 3,
                            StreetName = "Fejićeva"
                        },
                        new
                        {
                            StreetId = 11,
                            CityId = 3,
                            StreetName = "Adema Buće"
                        },
                        new
                        {
                            StreetId = 12,
                            CityId = 3,
                            StreetName = "Ale Cišica"
                        },
                        new
                        {
                            StreetId = 13,
                            CityId = 4,
                            StreetName = "Kicelj"
                        },
                        new
                        {
                            StreetId = 14,
                            CityId = 4,
                            StreetName = "Pazar"
                        },
                        new
                        {
                            StreetId = 15,
                            CityId = 4,
                            StreetName = "Franjevačka"
                        },
                        new
                        {
                            StreetId = 16,
                            CityId = 4,
                            StreetName = "Slatina"
                        });
                });

            modelBuilder.Entity("eHousing.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FavoriteEstateId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@ehousing.com",
                            FavoriteEstateId = 0,
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "eAn94TnO0rxUgtkXKIw0OmcHuTM=",
                            PasswordSalt = "r8u6uS+70RDdVoaqQGH/Ng==",
                            PhoneNumber = "0600000000",
                            Username = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "almedinalikadic@ehousing.com",
                            FavoriteEstateId = 0,
                            FirstName = "Almedin",
                            LastName = "Alikadic",
                            PasswordHash = "Dp1IkPN2nCG4+xksCpqtXRHOgt8=",
                            PasswordSalt = "r8u6uS+70RDdVoaqQGH/Ng==",
                            PhoneNumber = "0600000000",
                            Username = "Almedin"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "eldinalikadic@ehousing.com",
                            FavoriteEstateId = 0,
                            FirstName = "Eldin",
                            LastName = "Alikadic",
                            PasswordHash = "uyXNv/M4NDrC2Wc02eYaw4K5wT0=",
                            PasswordSalt = "r8u6uS+70RDdVoaqQGH/Ng==",
                            PhoneNumber = "0600000000",
                            Username = "Eldin"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "dinoalikadic@ehousing.com",
                            FavoriteEstateId = 0,
                            FirstName = "Dino",
                            LastName = "Alikadic",
                            PasswordHash = "MpIyZebSqceQkcoVA58OyDFnnEI=",
                            PasswordSalt = "r8u6uS+70RDdVoaqQGH/Ng==",
                            PhoneNumber = "0600000000",
                            Username = "Dino"
                        });
                });

            modelBuilder.Entity("eHousing.Database.UserRoles", b =>
                {
                    b.Property<int>("UserRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRolesId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRolesId = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRolesId = 2,
                            RoleId = 2,
                            UserId = 1
                        },
                        new
                        {
                            UserRolesId = 3,
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            UserRolesId = 4,
                            RoleId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserRolesId = 5,
                            RoleId = 1,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.HasOne("eHousing.Database.EstateType", "EstateType")
                        .WithMany()
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("Estate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateType");

                    b.Navigation("Street");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.FavoriteEstate", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany()
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("FavoriteEstate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.Picture", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany("Picture")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("eHousing.Database.Rent", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany("Rents")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.Street", b =>
                {
                    b.HasOne("eHousing.Database.City", "City")
                        .WithMany("Street")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("eHousing.Database.UserRoles", b =>
                {
                    b.HasOne("eHousing.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.City", b =>
                {
                    b.Navigation("Street");
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.Navigation("Picture");

                    b.Navigation("Rents");
                });

            modelBuilder.Entity("eHousing.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eHousing.Database.User", b =>
                {
                    b.Navigation("Estate");

                    b.Navigation("FavoriteEstate");

                    b.Navigation("Rents");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
