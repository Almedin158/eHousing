// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eHousing.Database;

namespace eHousing.Migrations
{
    [DbContext(typeof(eHousingContext))]
    [Migration("20210424230439_Version1")]
    partial class Version1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eHousing.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FloorSpace")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EstateId");

                    b.HasIndex("EstateTypeId");

                    b.HasIndex("StreetId");

                    b.HasIndex("UserId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("eHousing.Database.EstateStatus", b =>
                {
                    b.Property<int>("EstateStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OccupiedSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccupiedTill")
                        .HasColumnType("datetime2");

                    b.HasKey("EstateStatusId");

                    b.HasIndex("EstateId");

                    b.ToTable("EstateStatuses");
                });

            modelBuilder.Entity("eHousing.Database.EstateType", b =>
                {
                    b.Property<int>("EstateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstateTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateTypeId");

                    b.ToTable("EstateTypes");
                });

            modelBuilder.Entity("eHousing.Database.FavoriteEstate", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EstateId");

                    b.HasIndex("EstateId");

                    b.ToTable("FavoriteEstates");
                });

            modelBuilder.Entity("eHousing.Database.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("EstateId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("eHousing.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("eHousing.Database.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreetId");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("eHousing.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FavoriteEstateId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@ehousing.com",
                            FavoriteEstateId = 0,
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "CgaGn/TRnBEQPxOX4996cMZ9n4g=",
                            PasswordSalt = "l6lY0A8T5qj/us/qNLzGLA==",
                            PhoneNumber = "0603317627",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("eHousing.Database.UserRoles", b =>
                {
                    b.Property<int>("UserRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRolesId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRolesId = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRolesId = 2,
                            RoleId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.HasOne("eHousing.Database.EstateType", "EstateType")
                        .WithMany()
                        .HasForeignKey("EstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("Estate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstateType");

                    b.Navigation("Street");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.EstateStatus", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany("EstateStatus")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("eHousing.Database.FavoriteEstate", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany()
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("FavoriteEstate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.Picture", b =>
                {
                    b.HasOne("eHousing.Database.Estate", "Estate")
                        .WithMany("Picture")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("eHousing.Database.Street", b =>
                {
                    b.HasOne("eHousing.Database.City", "City")
                        .WithMany("Street")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("eHousing.Database.UserRoles", b =>
                {
                    b.HasOne("eHousing.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eHousing.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eHousing.Database.City", b =>
                {
                    b.Navigation("Street");
                });

            modelBuilder.Entity("eHousing.Database.Estate", b =>
                {
                    b.Navigation("EstateStatus");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("eHousing.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eHousing.Database.User", b =>
                {
                    b.Navigation("Estate");

                    b.Navigation("FavoriteEstate");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
